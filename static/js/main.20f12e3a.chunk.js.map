{"version":3,"sources":["services/api.js","action/actions.js","action/reducers/global.js","action/reducers/index.js","layout/login.js","router.js","App.js","serviceWorker.js","action/configureStore.js","index.js"],"names":["request","url","options","a","newOptions","method","body","FormData","headers","Accept","Authorization","window","localStorage","getItem","JSON","stringify","fetch","then","response","json","data","status","message","removeItem","catch","e","LOGIN","loginAPI","model","value","dispatch","console","log","type","FORGOTPASS","DASHBOARD","NOTIFICATION","item","combineReducers","Global","state","action","dashboard","AppLogin","username","password","visible","recovermail","error","showModal","setState","handleOk","props","form","resetFields","handleCancel","handleSubmit","preventDefault","validateFields","err","values","Recover","email","forgotPassword","emaicheck","target","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","MovetoDash","Logininfo","setItem","token","location","href","origin","this","history","push","className","Component","connect","forgotinfo","PrivateRoute","component","rest","render","AppRouter","fallback","exact","path","React","lazy","ActiveUser","idtoken","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","preloadedState","store","createStore","reducers","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","URL","process","addEventListener","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+1BACe,SAAeA,EAA9B,oC,4CAAe,WAAuBC,EAAKC,GAA5B,eAAAC,EAAA,4DAEa,UADpBC,EADO,KACYF,IACVG,QAA2C,QAAtBD,EAAWC,OACvCD,EAAWE,gBAAgBC,SAS/BH,EAAWI,QAAX,GACEC,OAAQ,oBACLL,EAAWI,UAVhBJ,EAAWI,QAAX,GACEC,OAAQ,mBACR,eAAgB,kCAChBC,cAAe,UAAWC,OAAOC,aAAaC,QAAQ,UACnDT,EAAWI,SAEhBJ,EAAWE,KAAOQ,KAAKC,UAAUX,EAAWE,OAS9CF,EAAWI,QAAU,CACnBC,OAAQ,mBACRC,cAAe,UAAWC,OAAOC,aAAaC,QAAQ,UArB7C,kBA2BNG,MAAM,gCAAgCf,EAAKG,GAChDa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACvBF,MAAK,SAAAG,GAUR,OATuB,IAAhBA,EAAKC,SAGc,iCAAjBD,EAAKE,SAA+D,2BAAjBF,EAAKE,UAE1DX,OAAOC,aAAaW,WAAW,QAC/BZ,OAAOC,aAAaW,WAAW,WAG/BH,KAERI,OAAM,SAAAC,GAAM,OAAOA,MAzCP,4C,sBCER,IAAMC,EAAQ,QAKd,SAASC,EAASP,EAAMQ,GAC9B,IAAIC,EAAQ7B,EAAQ,mBAAoB,CAAEK,OAAQ,OAAQC,KAAMc,IAChE,OAAM,SAACU,GACND,EAAMZ,MAAK,SAAAC,GACVa,QAAQC,IAAI,wBAAyBd,GACrCY,EARK,CAAEG,KAAMP,EAAON,KAQDF,QAMf,IAAMgB,EAAa,aAgBnB,IAAMC,EAAY,YAUlB,IAAMC,EAAe,e,yjBC1C5B,IAAIC,EAAO,GCKIC,kBAAgB,CAG5BC,ODPI,WAAsC,IAAtBC,EAAqB,uDAAbH,EAAKI,EAAQ,uCAC3C,OAAQA,EAAOR,MACd,KAAKG,EACH,YACSI,EADT,CAEMpB,KAAKqB,EAAOrB,KACZC,OAAOoB,EAAOrB,KAAKC,SAE3B,KAAKc,EACJ,YACUK,EADV,CAEEE,UAAU,CACTtB,KAAKqB,EAAOrB,KAAKA,KACjBC,OAAOoB,EAAOrB,KAAKC,UAGvB,QACE,YACGmB,O,6EETDG,E,2MACLH,MAAM,CAACI,SAAS,GAAIC,SAAS,GAAKC,SAAS,EAAOC,YAAY,GAAIC,OAAM,G,EAExEC,UAAY,WAAQ,EAAKC,SAAS,CAAEJ,SAAS,K,EAC7CK,SAAW,SAAC1B,GAAQM,QAAQC,IAAIP,GAC/B,EAAKyB,SAAS,CAAEJ,SAAS,EAAQC,YAAY,KAC7C,EAAKK,MAAMC,KAAKC,e,EAEjBC,aAAe,SAAC9B,GACf,EAAKyB,SAAS,CAAEJ,SAAS,EAAOC,YAAY,GAAKC,OAAM,IACvD,EAAKI,MAAMC,KAAKC,eAGhBxB,EADoB,EAAKsB,MAAjBtB,UHJF,CAAEG,KAAMC,EAAYd,KGGb,CAACA,KAAK,GAAGC,OAAO,O,EAK7BmC,aAAe,SAAC/B,GAChBA,EAAEgC,iBACF,EAAKL,MAAMC,KAAKK,gBAAe,SAACC,EAAKC,GAC9BD,IAEN7B,EADoB,EAAKsB,MAAjBtB,UACCH,EAASiC,Q,EAKpBC,QAAU,SAACpC,GACVA,EAAEgC,iBACF,IAAIG,EAAS,CAACE,MAAM,EAAKtB,MAAMO,cAE/BjB,EADoB,EAAKsB,MAAjBtB,UHlBH,SAAwBV,GAC9B,IAAIS,EAAQ7B,EAAQ,4BAA6B,CAAEK,OAAQ,OAAQC,KAAMc,IACzE,OAAM,SAACU,GACND,EAAMZ,MAAK,SAAAC,GAGVY,EAAS,CAAEG,KAAMC,EAAYd,KAAMF,QGa3B6C,CAAeH,K,EAEzBI,UAAY,SAACvC,GAEZ,GADA,EAAKyB,SAAS,CAAEH,YAAatB,EAAEwC,OAAOpC,QAChB,cAAnBJ,EAAEwC,OAAOpC,MAAsB,CACjC,IAAIqC,EAAY,EAAK1B,MAAMO,YAAYoB,YAAY,KAC/CC,EAAa,EAAK5B,MAAMO,YAAYoB,YAAY,KAC9CD,EAAYE,GAAcF,EAAY,IAA+C,IAA1C,EAAK1B,MAAMO,YAAYsB,QAAQ,OAAgBD,EAAa,GAAM,EAAK5B,MAAMO,YAAYuB,OAASF,EAAc,EAG5J,EAAKlB,SAAS,CAACF,OAAM,IAFzB,EAAKE,SAAS,CAACF,OAAM,SAIlB,EAAKE,SAAS,CAACF,OAAM,K,EAG3BuB,WAAY,SAAC9C,GAAO,IACd+C,EAAa,EAAKpB,MAAlBoB,UACwB,IAA1BA,EAAUpD,KAAKC,SAEjBV,OAAOC,aAAa6D,QAAQ,OAAO,QACnC9D,OAAOC,aAAa6D,QAAQ,QAAQD,EAAUpD,KAAKsD,OACnD/D,OAAOgE,SAASC,KAAOjE,OAAOkE,S,wEAe/B,OARCC,KAAK1B,MAAM2B,QAAQC,KAAK,KASxB,yBAAKC,UAAU,aAAf,a,GAnEoBC,aA6GRC,eApHf,SAAyB3C,GACvB,MAAO,CACLgC,UAAYhC,EAAMgC,UAClBY,WAAa5C,EAAM4C,cAiHRD,CAAyBxC,GC3GxC,IAAM0C,EAAe,SAAC,GAAD,IAAcH,EAAd,EAAGI,UAAyBC,EAA5B,oCACpB,kBAAC,IAAD,iBACKA,EADL,CAECC,OAAQ,SAAApC,GAAK,OACE,kBAAC8B,EAAc9B,QAK1BqC,E,iLAEJ,OACC,kBAAC,WAAD,CAAUC,SAAU,4CACnB,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASN,UAAW3C,IACtC,kBAAC,EAAD,CAAciD,KAAK,GAAGN,UAAWO,IAAMC,MAAK,kBAAM,0C,GAPhCZ,aAkBTC,mBAHf,SAAyB3C,GACxB,MAAO,CAAEuD,WAAYvD,EAAMwD,WAEbb,CAAyBM,GCtClCQ,E,iLAEF,OACF,kBAAC,EAAD,U,GAHgBf,aAWHC,mBAJf,SAAyB3C,GACvB,MAAO,KAGM2C,CAA0Bc,GCHnCC,EAAcC,QACW,cAA7BxF,OAAOgE,SAASyB,UAEe,UAA7BzF,OAAOgE,SAASyB,UAEhBzF,OAAOgE,SAASyB,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtF,MAAK,SAAA2F,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtE,QACfiE,UAAUC,cAAcO,YAI1BlF,QAAQC,IACN,iHAKEwE,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB7E,QAAQC,IAAI,sCAGRwE,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BpF,OAAM,SAAAwB,GACLjB,QAAQiB,MAAM,4CAA6CA,M,UCzF1BoE,ECAjCC,EDCGC,YACLC,EACAH,EACAI,YAAiBC,MCFrBC,IAASlC,OACP,kBAAC,IAAD,CAAU6B,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFSnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,IAAwBnH,OAAOgE,SAASC,MACpDC,SAAWlE,OAAOgE,SAASE,OAIvC,OAGFlE,OAAOoH,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMuB,IAAN,sBAEP5B,IAgEV,SAAiCK,EAAOC,GAEtCxF,MAAMuF,GACHtF,MAAK,SAAAC,GAEJ,IAAM8G,EAAc9G,EAASV,QAAQyH,IAAI,gBAEnB,MAApB/G,EAASG,QACO,MAAf2G,IAA8D,IAAvCA,EAAY3D,QAAQ,cAG5CoC,UAAUC,cAAcwB,MAAMjH,MAAK,SAAA2F,GACjCA,EAAauB,aAAalH,MAAK,WAC7BN,OAAOgE,SAASyD,eAKpB9B,EAAgBC,EAAOC,MAG1BhF,OAAM,WACLO,QAAQC,IACN,oEArFAqG,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMjH,MAAK,WACjCc,QAAQC,IACN,iHAMJsE,EAAgBC,EAAOC,OEnC/BE,K","file":"static/js/main.20f12e3a.chunk.js","sourcesContent":["// import {message} from 'antd';\nexport default async function request(url, options) {\n  const newOptions = {  ...options };  \n  if (newOptions.method === 'POST' || newOptions.method === 'PUT') {\n    if (!(newOptions.body instanceof FormData)) {\n      newOptions.headers = {\n        Accept: 'application/json',\n        'Content-Type': 'application/json; charset=utf-8',\n        Authorization: 'Bearer '+ window.localStorage.getItem('token'),\n        ...newOptions.headers,\n      };\n      newOptions.body = JSON.stringify(newOptions.body);\n    } else {\n      newOptions.headers = {\n        Accept: 'application/json',\n        ...newOptions.headers,\n      };\n    }\n  }\n  else{\n    newOptions.headers = {\n      Accept: 'application/json',\n      Authorization: 'Bearer '+ window.localStorage.getItem('token')\n    };\n  }\t  \n  //52.14.176.105\n  //10.20.1.23\n  //http://10.20.3.120:3000\n  return fetch('http://factis.mobilytedev.com'+url, newOptions)\n\t  .then(response => response.json())\n      .then(data => {\n        if(data.status === 0)\n        {\n          // message.error(data.message || 'wrong info');\n          if(data.message === \"Invalid auth token provided.\" || data.message === \"Invalid Authorization.\")\n          {\n           window.localStorage.removeItem('user');\n           window.localStorage.removeItem('token');\n          }\n        }\n\t\t  return data \n\t\t  })\n\t\t.catch(e => {return e})\n}","import request from '../services/api'\n\n/*login api*/\nexport const LOGIN = 'LOGIN';\nfunction loginData(val) {\n\treturn { type: LOGIN, data: val}\n}\n\nexport function loginAPI(data, model){\n\tlet value = request('/api/admin/login', { method: 'POST', body: data });\n\treturn(dispatch)=>{\n\t\tvalue.then(response => {\n\t\t\tconsole.log('login api call result', response)\n\t\t\tdispatch(loginData(response))\n\t\t})\n\t}\n}\n\n/*FORGOTPASS api*/\nexport const FORGOTPASS = 'FORGOTPASS';\nexport function forgotPass(val) {\n\treturn { type: FORGOTPASS, data: val}\n}\n\nexport function forgotPassword(data){\n\tlet value = request('/api/admin/forgotPassword', { method: 'POST', body: data });\n\treturn(dispatch)=>{\n\t\tvalue.then(response => {\n\t\t\t// if(response.status === 1)\n\t\t\t//   { message.success(response.message); }\n\t\t\tdispatch({ type: FORGOTPASS, data: response})\n\t\t})\n\t}\n}\n\nexport const DASHBOARD = 'DASHBOARD';\nexport function dashboard(filter){\n\tlet value = request('/api/admin/dashboard?filter='+filter, { method: 'GET'});\n\treturn (dispatch)=>{\n\t\tvalue.then(response => {\n\t\t\tdispatch({ type: DASHBOARD, data: response});\n\t\t});\n\t}\n}\n\nexport const NOTIFICATION = 'NOTIFICATION';\nexport function notifications(page,limit){\n\tlet value = request('/api/admin/notifications?limit=50&page=1', { method: 'GET'});\n\treturn (dispatch)=>{\n\t\tvalue.then(response => {\n\t\t\tdispatch({ type: NOTIFICATION, data: response});\n\t\t});\n\t}\n}","import { NOTIFICATION, DASHBOARD } from '../actions'\n\n\nlet item = {};\nexport function Global(state = item,action) {\n\tswitch (action.type) {\n\t\tcase NOTIFICATION:\n\t\t  return{\n          ...state,\n          data:action.data,\n          status:action.data.status\n\t\t\t}\n\t\tcase DASHBOARD:\n\t\t\treturn{\n          ...state,\n\t\t\t\t\tdashboard:{\t\n\t\t\t\t\t\tdata:action.data.data,\n\t\t\t\t\t\tstatus:action.data.status\n\t\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t  return{\n\t\t\t\t...state\n\t\t\t}\n\t\t}\n}","import { combineReducers } from 'redux';\nimport {Global} from './global';\n/*import {Logininfo, forgotinfo, resetinfo} from './login';\nimport {Setting} from './setting';\nimport {appuserlist} from './appuser';\nimport {vendorinfo} from './vendor';\nimport {payment} from './payment';*/\n\nexport default combineReducers({\n  //forgotinfo,resetinfo,appuserlist,vendorinfo,payment, Logininfo,\n  //Setting,\n   Global\n})","import React, { Component } from 'react';\nimport { loginAPI, forgotPassword, forgotPass } from './../action/actions';\nimport { connect } from 'react-redux';\nimport './login.css'\n\n\nfunction mapStateToProps(state) {\n  return {\n    Logininfo : state.Logininfo,\n    forgotinfo : state.forgotinfo\n  };\n}\n\nclass AppLogin extends Component {\t\n\tstate={username:'', password:'',  visible: false, recovermail:'', error:false}\t\n\t\n\tshowModal = () => { this.setState({ visible: true, }); }\n\thandleOk = (e) => { console.log(e);\n\t\tthis.setState({ visible: false,  recovermail:'' });\n\t\tthis.props.form.resetFields();\n\t}\n\thandleCancel = (e) => {\n\t\tthis.setState({ visible: false, recovermail:'' , error:false});\n\t\tthis.props.form.resetFields();\n\t\tlet values = {data:'',status:''};\n\t\tconst { dispatch} = this.props\n\t\tdispatch(forgotPass(values));\n\t}\n\t\n\t handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.form.validateFields((err, values) => {\n\t\t  if (!err) {\n\t\t\tconst { dispatch} = this.props\n\t\t\tdispatch(loginAPI(values, 'login'));\n\t\t  }\n\t\t});\n\t  }\n\t  \n\tRecover = (e) => {\n\t\te.preventDefault();\n\t\tlet values = {email:this.state.recovermail};\n\t\tconst { dispatch} = this.props\n\t\tdispatch(forgotPassword(values));\t\t\n\t}\n\temaicheck = (e) => {\n\t\tthis.setState({ recovermail: e.target.value });\t\t\n\t\tif(e.target.value !== \"undefined\"){\n\t\t\tlet lastAtPos = this.state.recovermail.lastIndexOf('@');\n\t\t\tlet lastDotPos = this.state.recovermail.lastIndexOf('.');\n\t\t\tif (!(lastAtPos < lastDotPos && lastAtPos > 0 && this.state.recovermail.indexOf('@@') === -1 && lastDotPos > 1 && (this.state.recovermail.length - lastDotPos) > 1)) {\n\t\t\t\tthis.setState({error:true})\n\t\t\t}\n\t\t\telse{this.setState({error:false})}\n\t\t}\n\t\telse{this.setState({error:false})}\n\t}\n\t  \n\tMovetoDash =(e) => {\n\t\tlet {Logininfo} = this.props;\n\t\tif(Logininfo.data.status === 1)\n\t\t{\n\t\t\twindow.localStorage.setItem('user','demo');\n\t\t\twindow.localStorage.setItem('token',Logininfo.data.token);\n\t\t\twindow.location.href = window.origin;\n\t\t\t//this.props.history.push(\"/\")\n\t\t}\n\t}\n\t\n\trender() {\n\t\t// if(window.localStorage.getItem('token')){\n\t\t\tthis.props.history.push(\"/\")\n\t\t// }\n\t\t\n\t\t// const { getFieldDecorator } = this.props.form;\n\t\t// const { Logininfo, forgotinfo } = this.props;\n\t\t// if(Logininfo.status === 1){ this.MovetoDash()}\n\t\t// if(forgotinfo.status === 1){ this.handleCancel()}\n\t\t\n\t\treturn (\n\t\t <div className=\"loginpage\">\n\t\t login\n\t\t\t{/* <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\t\t\t\t<FormItem>\n\t\t\t\t  {getFieldDecorator('email', {\n\t\t\t\t\trules: [{ type: 'email', message: 'The input is not valid E-mail!', }, { required: true, message: 'Please input your E-mail!', }],\n\t\t\t\t  })(\n\t\t\t\t\t<Input prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Email\" />\n\t\t\t\t  )}\n\t\t\t\t</FormItem>\n\t\t\t\t<FormItem>\n\t\t\t\t  {getFieldDecorator('password', {\n\t\t\t\t\trules: [{ required: true, message: 'Please input your Password!' }],\n\t\t\t\t  })(\n\t\t\t\t\t<Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\" />\n\t\t\t\t  )}\n\t\t\t\t</FormItem>\n\t\t\t\t<FormItem className='mr0'>\t\t\t\t \n\t\t\t\t  <span className=\"login-form-forgot\" onClick={this.showModal}>Forgot password</span>\n\t\t\t\t  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n\t\t\t\t\tLog in\n\t\t\t\t  </Button>\n\t\t\t\t</FormItem>\n\t\t\t  </Form>\n\t\t\t  \n\t\t\t  {/*forgot password*-/}\n\t\t\t\t<Modal title=\"Recover Password\" width={300} visible={this.state.visible} onCancel={this.handleCancel} footer={null}>\n\t\t\t\t\t<Form onSubmit={this.Recover}>\n\t\t\t\t\t\t<Input prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Enter your email\" onChange={this.emaicheck} name='recovermail' value={this.state.recovermail}/>\n\t\t\t\t\t\t{this.state.error ? <span className=\"error\">Enter valid email</span> : ''}\t\t\t\t\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button type=\"primary\" onClick={this.Recover} className=\"login-form-button\" disabled={this.state.error || this.state.recovermail ==='' ? true : false}>\n\t\t\t\t\t\tRecover Password\n\t\t\t\t\t</Button>\n\t\t\t\t\t</Form>\n\t\t\t\t</Modal> */}\n\t\t </div>\n\t\t);\n   }\n} \n// export default connect(mapStateToProps)(Form.create()(AppLogin));\nexport default connect(mapStateToProps)(AppLogin);","import React, { Suspense, Component } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport AppLogin from './layout/login'\n\nfunction hasLogin() {\n\tlet token = 'sdfsdf2sdf2dsf2sd3f'\n\tif (token) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false\n\t}\n}\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n\t<Route\n\t\t{...rest}\n\t\trender={props =>\n\t\t\thasLogin() ? (<Component {...props} />) : (<Redirect to={{ pathname: \"/login\", state: { from: props.location } }} />)\n\t\t}\n\t/>\n);\n\nclass AppRouter extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<Router>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/login' component={AppLogin} />\n\t\t\t\t\t\t<PrivateRoute path='' component={React.lazy(() => import('./layout/BasicLayout'))} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Router>\n\t\t\t</Suspense>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state) {\n\treturn { ActiveUser: state.idtoken, };\n}\nexport default connect(mapStateToProps)(AppRouter);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport AppRouter from './router';\n\nclass App extends Component {\t\n  render() {\n    return (\n\t\t<AppRouter />\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n  };\n}\nexport default connect(mapStateToProps) (App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n//import { createLogger } from 'redux-logger'\nimport reducers from './reducers/index'\n\n//const loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    reducers,\n    preloadedState,\n    applyMiddleware( thunkMiddleware, )  //loggerMiddleware\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './action/configureStore'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.register();\n"],"sourceRoot":""}